<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:jpa="http://www.springframework.org/schema/data/jpa"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa.xsd">
	
    <!-- 
        스프링 프레임워크가 제공하는 어노테이션 기반의 트랜잭션 관리자 활성화
        @Transactional이 붙은 곳에 트랜잭션 적용
     -->
    <tx:annotation-driven proxy-target-class="true"/>
    
    <jpa:repositories base-package="egovframework.com.reservation.*.repository" />
    
    <context:property-placeholder location="classpath:egovframework/properties/application.properties" order="1" ignore-unresolvable="true"/>
 
    <context:component-scan base-package="egovframework.com.reservation.*.service, egovframework.com.reservation.*.repository"/>
 
    <!-- dataSource 설정 -->
    <bean id="dataSource" class="org.apache.tomcat.jdbc.pool.DataSource">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>
     
    <!-- 트랜잭션 관리자 설정 -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
 
    <!-- 
        @Repository 어노테이션이 붙어 있는 spring bean에 예외 변환 AOP 적용
        이 AOP는 JPA 예외를 스프링 예외로 변환 
    -->
    <bean class="org.springframework.dao.annotation.PersistenceExceptionTranslationPostProcessor"/> <!-- JPA를 스프링 컨테이너에서 사용할 수 있도록 제공 -->
 
    <!-- 엔티티 매니저 팩토리 등록 (Spring Framework에서 JPA 사용을 위함) -->
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
        <property name="dataSource" ref="dataSource"/> <!-- 사용할 DataSource 등록 -->
        <property name="packagesToScan" value="egovframework.com.reservation.*.model"/> <!-- @Entity 가 붙은 클래스를 자동으로 검색하기 위한 시작점 지정-->
        <!-- <property name="persistenceUnitName" value="yourPersistenceUnitName"/> --> <!-- 영속성 유닛 이름 지정. 설정하지 않을 시 default 라는 이름의 영속성 유닛 생성 -->
        <property name="jpaVendorAdapter"> <!-- 사용할 JPA 벤더를 지정 -->
            <!-- 하이버네이트 구현체 사용 -->
            <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"/>
        </property>
        <property name="jpaProperties"> <!-- 하이버네이트 구현체의 상세 설정 -->
            <props>
                <prop key="hibernate.dialect">org.hibernate.dialect.MariaDB53Dialect</prop> <!-- 방언 -->
                <prop key="hibernate.show_sql">true</prop>                   <!-- SQL 보기 -->
                <prop key="hibernate.format_sql">true</prop>                 <!-- SQL 정렬해서 보기 -->
                <prop key="hibernate.use_sql_comments">true</prop>           <!-- SQL 코멘트 보기 -->
                <prop key="hibernate.id.new_generator_mappings">true</prop>  <!-- 새 버전의 ID 생성 옵션 (항상 true 권장) -->
                <prop key="hibernate.hbm2ddl.auto">update</prop>             <!-- DDL 자동 생성 -->
                <!-- 
                    hibernate.hbm2ddl.auto 4가지 옵션
                        - create : 기존 DDL을 제거하고 새로 생성
                        - create-drop : create와 동일, 애플리케이션 종료 시 생성한 DDL을 제거
                        - update : 현재 데이터베이스 DDL과 비교해서 변경사항만 수정
                        - validate : 현재 엔티티 매핑 정보와 데이터베이스 스키마가 같은지 비교 (다르면 경고 후 실행하지 않음)
                 -->
            </props>
        </property>
    </bean>
</beans>
